name: "Build and Deploy"

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/deploy.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/deploy.yml"

permissions:
  id-token: write
  pages: write
  packages: write
  actions: read
  contents: read

env:
  PROJECT_ID: devil-fruit-database-id
  GAR_LOCATION: us-east1
  REPOSITORY: devil-fruit-backend
  SERVICE: devil-fruit-database-crs
  REGION: us-east1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - id: "auth"
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.4
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ vars.WIF_PROVIDER }}"
          service_account: "${{ vars.WIF_SERVICE_ACCOUNT }}"

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies & build frontend
        working-directory: ./frontend
        run: |
          bun install
          bun run build

      - name: Upload frontend build artifacts
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          name: frontend-dist
          path: ./frontend/dist

      - name: Docker Auth
        id: docker-auth
        uses: docker/login-action@v3.3.0
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          docker build --target development -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./backend

  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - id: "auth"
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.4
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ vars.WIF_PROVIDER }}"
          service_account: "${{ vars.WIF_SERVICE_ACCOUNT }}"

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: frontend-dist
          path: ./frontend/dist

      - name: Deploy frontend
        uses: actions/deploy-pages@v4.0.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifact_name: frontend-dist

      - name: Docker Auth
        id: docker-auth
        uses: docker/login-action@v3.3.0
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          gcloud auth configure-docker "${{ env.GAR_LOCATION }}-docker.pkg.dev"
          docker build --target development -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest" ./backend
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2.7.0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest
          flags: |
            --port=8000 
            --cpu=1 
            --memory=512Mi 
            --min-instances=0 
            --max-instances=1 
            --allow-unauthenticated
            --add-volume=name=db-data,type=cloud-storage,bucket=${{ env.PROJECT_ID }}-db
            --add-volume-mount=volume=db-data,mount-path=/var/lib/postgresql/data
          env_vars: |
            ENVIRONMENT=prod
            POSTGRES_SERVER=localhost
            POSTGRES_PORT=5432
            POSTGRES_DB=devil_fruit_db
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

      - name: Show Output
        run:
          echo ${{ steps.deploy.outputs.url }}


