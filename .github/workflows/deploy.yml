name: "Build and Deploy"

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/deploy.yml"
  pull_request:
    types: [opened, synchronize]
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:
    inputs:
      initialize_db:
        description: "Initialize Database"
        required: true
        type: boolean
        default: false

permissions:
  id-token: write
  pages: write
  packages: write
  actions: read
  contents: read

env:
  PROJECT_ID: devil-fruit-database-id
  GAR_LOCATION: us-east1
  REPOSITORY: devil-fruit-backend
  SERVICE: devil-fruit-database-crs
  REGION: us-east1
  ENVIRONMENT: prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # Handle dependencies and build frontend
      - name: Set up Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies & build frontend
        working-directory: ./frontend
        run: |
          bun install
          bun run build

      # Frontend deployment
      - name: Upload frontend build artifacts
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          name: frontend-dist
          path: ./frontend/dist

      - name: Deploy frontend
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        uses: actions/deploy-pages@v4.0.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifact_name: frontend-dist

      # Backend authentication
      - id: "auth"
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.4
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ vars.WIF_PROVIDER }}"
          service_account: "${{ vars.WIF_SERVICE_ACCOUNT }}"

      - name: Docker Auth
        id: docker-auth
        uses: docker/login-action@v3.3.0
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      # Backend deployment
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0

      - name: Build and Push Container
        uses: docker/build-push-action@v6.10.0
        with:
          context: ./backend
          push: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch' }}
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: ${{ env.ENVIRONMENT }}

      # Database and service deployment
      - name: Initialize Database
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.initialize_db == 'true'
        run: |-
          JOB_NAME="db-init-${{ github.run_number }}"

          gcloud run jobs create ${JOB_NAME} \
            --image "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" \
            --region ${{ env.REGION }} \
            --tasks 1 \
            --service-account=${{ vars.WIF_SERVICE_ACCOUNT }} \
            --set-env-vars="PYTHONPATH=../,ENVIRONMENT=${{ env.ENVIRONMENT }}" \
            --command="/app/db_cmd.sh"
            
          gcloud run jobs execute ${JOB_NAME} --region ${{ env.REGION }} --wait

      - name: Deploy to Cloud Run
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        uses: google-github-actions/deploy-cloudrun@v2.7.0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          flags: |
            --port=8000 
            --cpu=1 
            --memory=512Mi 
            --min-instances=0 
            --max-instances=1 
            --allow-unauthenticated
            --service-account=${{ vars.WIF_SERVICE_ACCOUNT }}
            --execution-environment=gen2
          env_vars: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
